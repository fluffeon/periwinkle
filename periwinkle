#!/bin/sh

#    Periwinkle - A MPD client with tight integration with dmenu and libnotify.
#    Copyright (C) 2023 Fen
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <https://www.gnu.org/licenses/>.

# -------------------
# CONFIGURATION STUFF
# -------------------


# Here's the config for Periwinkle
# You'll have to change this before you do anything else

# ---
# MPD
# ---
#
# Choose where to point

#MPD_Host=localhost
#MPD_Port=6600

# Choose your music directory

#Directory_MusicFolder=$HOME/Music

# -----
# APPEARANCE
# -----
#
# In dwm, usually the following equivalents for dmenu coloring are:
# Bar_Font = dmenufont
# Color_Background = col_gray1
# Color_Foreground = col_gray3
# Color_SelectedBackground = col_gray4
# Color_SelectedForeground = col_cyan

#Bar_Font="Sans Serif":size=10
#Color_Background=#5B544C
#Color_Foreground=#E4E3E0
#Color_SelectedBackground=#DA2A47
#Color_SelectedForeground=#E4E3E0

# Location of DMENU, if it's at the bottom or top.
# By default it's at the bottom

#Bar_Position=bottom

UseNerdFont=false

# ----------------
# PREVIEW SETTINGS
# ----------------
#
# Choose where to save the image previews

#Directory_AlbumCover=$HOME/periwinkle

# ---------------------
# NOTIFICATION SETTINGS
# ---------------------
#
# Notify timeout in seconds
# Set 0 for no timeout

#Notify_Timeout=5

# Show extra control buttons in the popup

#Notify_ExtraButtons=false

# Format the notification
# Set the appearance of the notification to your liking.
# Side note: %datep% is a variant of %date%, what it does is that if the metadata doesn't contain any date, it hides the parenthesis. Otherwise, if it contains a year, it shows them.

#Notify_TitlePlay="%stateicon% %title%"
#Notify_SubtitlePlay="%artist%\n%album% %datep%"

# Set the title to appear when the queue is completely stopped

#Notify_TitleStop="%stateicon% Stopped"

# Use formatting behavior from CLI, similar to previous versions of Periwinkle
# So what this does is basically when a song has no title, it displays the filename instead. And if there's no artist, it shows "Unknown Artist"
# By default, it's set on "false"

#Notify_FillEmptyTags=false

# ----------------
# PREVIEW SETTINGS
# ----------------
# 
# Choose the hash that you would like to use to save the image previews
# This is useful to keep every single album unique.
# For example, if you had Weezer self-titled albums with the same album name in their metadata, it should be able to differentiate them to show the correct album cover because they have a different metadata for the year and artist. If you have proper metadata for every album then it should work as expected
#
# Options: 
# none | md5 | sha256 | sha512 | base64
# The default is sha256

#UseHash=sha256

# Down here is code!

pw_Help() {
	echo "Periwinkle - The cutest MPD client

	This is a CLI and also a semi-GUI client that can
	be integrated into a DWM desktop by the use of
	dunst and dmenu, if you'd like.

	Usage: periwinkle [<command> <arguments> ... <more args>]

	Fetch Commands
		add <file> - Adds a song from the music dir to the playlist
		delete <int song> - Removes a song from the playlist
		list <metadata arg1> [<metadata arg2> <search term>] - Fetches a list of songs based on the metadata input by the user

	Playback Commands
		pause - Toggles between pause and play
		play - Play the current song
		stop - Stops the playlist completely
		prev, previous - Goes to the previous song on the queue
		next, forward - Goes to the next song on the queue
		setvol <0 - 100> - Sets the volume
		seek <num> - Seeks to a certain point of the song
		single <0-1 or oneshot> - Sets single mode
		random <0-1> - Sets random mode
		repeat <0-1> - Sets repeat mode
		consume <0-1> - Sets consume mode

	Playlist Commands
		crossfade <int> - Sets a crossfade between songs
		shuffle - Shuffles the playlist
		save <string playlist name> - Saves the playlist as a file
		rm <string playlist name> - Deletes a saved playlist
		playlist - Shows the current playlist and song IDs
		delete - Removes a song from the current playlist

	Database Commands
		update - Updates the MPD database

	Periwinkle Commands
		menu - Shows the dmenu prompt directly
		info - Report version of Periwinkle, and licensing information
		print <%title% %artist% %album% %date% %datep% %songid% %state% %stateicon%> - Command that works like mpc's --format flag.
		The point of the command above is to echo current song info in a clean manner for other scripts.

	Dmenu Exclusive Commands
		cli <cmd> - Runs a CLI command within dmenu

	Advanced Commands
		daemon - Run as a daemon to show song notifications on the background (experimental)
		statsfornerds - Shows some environment variables related to Periwinkle
		console - Pulls an interactive MPD control terminal (advanced)
		direct - Sends commands to MPD without going into the interactive terminal

	If you want to change the settings for this client, tinker with the periwinkle script.
	All documentation is on the script."
}

pw_AboutProgram() {
	echo "
    Periwinkle - The cutest MPD client
    Version:

    Copyright (C) 2023 Fen

    Contributors: ChatGPT, Barrucadu

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>."
}

pw_Error() {
	case $1 in
		"UnknownCommand")
			echo 'Error: '"$2"' is not a known command >.<'
			exit 1;;
	
		"InvalidInteger")
			echo 'Error: "'"$2"'" is not a valid integer -w-'
			exit 1;;

		"InvalidNumber")
			echo 'Error: "'"$2"'" is not a valid number -w-'
			exit 1;;

		"FewArguments")
			echo "Error: Not enough arguments... ;w;"
			exit 1;;

		"ManyArguments")
			echo "Error: T-That's too many arguments!! >w<"
			exit 1;;

		"WrongArguments")
			echo "Error: Wrong arguments for this command... :<"
			exit 1;;

		"PlaylistClear")
			echo 'Error: You can'"'"'t "'"$2"'" if you have no songs in your queue or if the queue is stopped! >:3'
			exit 1;;

		"" | *)
			echo "Error: Something went wrong... o.O
			If you see this error please open a issue report about it"
			exit 1;;
	esac
}

# Check if the necessary dependencies are installed
pw_MissingDependency() {
	case $cmd in
		"notify-send")
			echo "Dependency missing: 'notify-send' (libnotify) is required but not found. Please install it."
			exit 1;;

		"nc")
			echo "Dependency missing: 'nc' (openbsd-netcat or gnu-netcat) is required but not found. Please install it."
			exit 1;;

		*)
			echo 'Dependency missing: '"'$cmd'"' is required but not found. Please install it.'
			exit 1;;
	esac
}

# Placeholder default check. Will be more sophisticated in the future.
pw_FillInTheBlanks() {

	if [ -z "$MPD_Host" ]; then
		MPD_Host=localhost
	fi
	
	if [ -z "$MPD_Port" ]; then
		MPD_Port=6600
	fi

	if [ -z "$Notify_Timeout" ]; then
		Notify_Timeout=5	
	fi

	if [ -z "$Notify_TitlePlay" ]; then
		Notify_TitlePlay='%stateicon% "%title%"'
	fi

	if [ -z "$Notify_SubtitlePlay" ]; then
		Notify_SubtitlePlay="by %artist%\nfrom %album% %datep%"	
	fi

	if [ -z "$Notify_TitleStop" ]; then
		Notify_TitleStop="%stateicon% Stopped"
	fi

	if [ -z "$Notify_FillEmptyTags" ]; then
		Notify_FillEmptyTags=false	
	fi

	if [ -z "$Notify_ExtraButtons" ]; then
		Notify_ExtraButtons=false
	fi

	if [ -z "$Bar_Position" ]; then
		Bar_Position=top
	fi

	if [ -z "$Bar_Font" ]; then
		Bar_Font="Sans Serif":size=10
	fi
	
	if [ -z "$Color_Background" ]; then
		Color_Background=#C0C0C0
	fi

	if [ -z "$Color_Foreground" ]; then
		Color_Foreground=#000000
	fi

	if [ -z "$Color_SelectedBackground" ]; then
		Color_SelectedBackground=#000080
	fi

	if [ -z "$Color_SelectedForeground" ]; then
		Color_SelectedForeground=#FFFFFF
	fi

	if [ -z "$Directory_AlbumCover" ]; then
		Directory_AlbumCover=$HOME/periwinkle	
	fi

	if [ -z "$Directory_MusicFolder" ]; then
		Directory_MusicFolder=$HOME/Music	
	fi

	if [ -z "$UseNerdFont" ]; then
		if [ "$(uname)" = "Darwin" ]; then
			UseNerdFont=false
		else
			UseNerdFont=true
		fi
	fi
}

# Function to check if a value is a number
pw_isPositiveNumber() {
	if [ "$1" -gt 0 ]; then
		return 0 # It's a positive number
	else
		return 1 # It's not a positive number or it contains non-numeric characters
	fi
}

# Function to check if the integer is within the desired range
pw_isNumberInRange() {
	if [ "$1" -gt "$MINIMUMVAL" ] && [ "$1" -lt "$MAXIMUMVAL" ]; then
		return 0
	else
		return 1
	fi
}

pw_CheckNumber() {
	# Read input and validate it until a valid integer in the range is provided
	case $2 in
		"inRange")
			if ! pw_isNumberInRange "$1"; then
				# Set the variable with the validated integer
				pw_Error InvalidInteger "$1"
			fi;;

		"isPositive")
			if ! pw_isPositiveNumber "$1"; then
				pw_Error InvalidNumber "$1"
			fi;;

		*)
			echo "$1"
			echo "DEBUG INFO: Invalid arguments for this function"
			echo "If you see this message, please open a issue about it."
			pw_Error;;
	esac
}

pw_SpawnNotification() {
	# $1 = Title
	# $2 = Subtitle
	# $3 = Icon
	# $4 = Extra Option (optional)

	if [ "$(uname)" = "Darwin" ]; then
		NotificationActionSelected="$(alerter -title "$1" -message "$2" -contentImage "$3" -group 27072 -timeout "$(($Notify_Timeout / 1000))")"
	else
		NotificationActionSelected="$(notify-send -t "$Notify_Timeout" -u low -r 27072 "$1" "$2" -i "$3" --action open=Show "$4" "$NOTIFICATIONACTION")"
	fi

	if [ -z "$NotificationActionSelected" ] || [ "$NotificationActionSelected" = "@TIMEOUT" ] || [ "$NotificationActionSelected" = "@CLOSED" ]; then
		return 0
	elif [ -s /tmp/pw_daemonmode ]; then
		if [ "$NotificationActionSelected" = "$OPPSTATUS" ] || [ "$NotificationActionSelected" = "forward" ]; then
			pw_UserSelection "$NotificationActionSelected"
			return 0
		fi
			pw_MenuOptions daemon
		elif [ "$NotificationActionSelected" = "$OPPSTATUS" ] || [ "$NotificationActionSelected" = "forward" ]; then
			pw_UserSelection "$OPPSTATUS"
			return 0
		else
			pw_MenuOptions "$NotificationActionSelected"
		fi
}

pw_HashSongName() {
	case $UseHash in
		"none")
			previewname="$Directory_AlbumCover"'/'"$album $date"'.png';;
		"md5")
			previewname="$Directory_AlbumCover"/"$(echo "$album $date" | md5sum | cut -d' ' -f1)".png;;
		"base64")
			previewname="$Directory_AlbumCover"/"$(echo "$album $date" | base64 | cut -d' ' -f1)".png;;
		"sha512")
			previewname="$Directory_AlbumCover"/"$(echo "$album $date" | sha512sum | cut -d' ' -f1)".png;;
		"sha256" | "" | *)
			previewname="$Directory_AlbumCover"/"$(echo "$album $date" | sha256sum | cut -d' ' -f1)".png;;	
	esac
}

# Clean the stinky output
pw_CleanOutput() {
	awk '!/^OK.*$/'
}

# Function to send commands to MPD which is netcat-agnostic
pw_MPDCommand() { 
	(
	printf "%s\n" "$1" "close";
	sleep 0.01
	) | nc "$MPD_Host" "$MPD_Port"; 
}

pw_ReloadMetadata() {

	case $1 in
		"Title")
			title="$(echo "$stats" | awk -F ': ' '/^Title:/ { sub(/^Title: /, ""); print }')"
			titlesave="$title"

			if [ -z "$title" ]; then
				title="$mpc_file"
			fi;;

		"Artist")
			artist="$(echo "$stats" | awk -F ': ' '/^Artist:/ { sub(/^Artist: /, ""); print }')"
			artistsave="$artist"

			if [ -z "$artist" ]; then
				artist="Unknown Artist"
			fi;;

		"Album")
			album="$(echo "$stats" | awk -F ': ' '/^Album:/ { sub(/^Album: /, ""); print }')";;

		"Date")
			date="$(echo "$stats" | awk -F ': ' '/^Date:/ { sub(/^Date: /, ""); print }')"
			unprocesseddate=$date
		
			if [ -z "$date" ]; then
				date=""
			else
    			date="($date)"
			fi;;

		"SongId")
			songid="$(echo "$stats2" | awk -F ': ' '/^song:/ { sub(/^song: /, ""); print }')";;

		"State")
			state="$(echo "$stats2" | awk -F ': ' '/^state:/ { sub(/^state: /, ""); print }')"
			if [ "$UseNerdFont" = "true" ]; then
				if [ "$state" = "stop" ]; then
					NOTIFYSEND_STATUS=""
					OPPSTATUS=""
					OPPSTATUS2=""
				elif [ "$state" = "pause" ]; then
					NOTIFYSEND_STATUS=""
					OPPSTATUS=""
					OPPSTATUS2=""
				elif [ "$state" = "play" ]; then
					NOTIFYSEND_STATUS=""
					OPPSTATUS=""
					OPPSTATUS2=""
				fi
			else
				if [ "$state" = "stop" ]; then
					NOTIFYSEND_STATUS="[S]"
					OPPSTATUS="Play"
					OPPSTATUS2=""
				elif [ "$state" = "pause" ]; then
					NOTIFYSEND_STATUS="[PS]"
					OPPSTATUS="Play"
					OPPSTATUS2="Stop"
				elif [ "$state" = "play" ]; then
					NOTIFYSEND_STATUS="[PL]"
					OPPSTATUS="Pause"
					OPPSTATUS2="Stop"
				fi
			fi;;

		"RefreshVariables")
			stats="$(pw_MPDCommand currentsong | tr -d '\r')"
			stats2="$(pw_MPDCommand status | tr -d '\r')"
			mpc_file="$(echo "$stats" | awk -F ': ' '/^file:/ {print $2}' | awk '{$1=$1};1')"
			filename="$Directory_MusicFolder"'/'"$mpc_file";;

		"SetAlbumCover")
			case $UseHash in
				"none")
					previewname="$Directory_AlbumCover"/"$album $date.png";;
				"md5")
					previewname="$Directory_AlbumCover"/"$(echo "$album $date" | md5sum | cut -d' ' -f1)".png;;
				"base64")
					previewname="$Directory_AlbumCover"/"$(echo "$album $date" | base64 | cut -d' ' -f1)".png;;
				"sha512")
					previewname="$Directory_AlbumCover"/"$(echo "$album $date" | sha512sum | cut -d' ' -f1)".png;;
				"sha256" | "" | *)
					previewname="$Directory_AlbumCover"/"$(echo "$album $date" | sha256sum | cut -d' ' -f1)".png;;	
			esac

			[ -e "$previewname" ] || 
			ffmpeg -y -i "$filename" -an -vf scale=128:128 "$previewname" > /dev/null 2>&1;;

		"All")
			pw_ReloadMetadata RefreshVariables
			pw_ReloadMetadata Title
			pw_ReloadMetadata Artist
			pw_ReloadMetadata Album
			pw_ReloadMetadata Date
			pw_ReloadMetadata SongId
			pw_ReloadMetadata State
			pw_ReloadMetadata SetAlbumCover;;
	esac

	return 
}

pw_Refresh() {
	pw_ReloadMetadata RefreshVariables
	pw_ReloadMetadata State

	if [ "$CurrentState" != "$state" ] || [ -z "$CurrentState" ]; then
		pw_ReloadMetadata State
		CurrentState=$state
	fi

	if [ "$mpc_file" != "$CurrentFile" ] || [ -z "$CurrentFile" ]; then

		# Every attribute changes except for the title, it is unknown what causes this bug
		# So in the meantime, this is here until a fix is found for this
		# Feel free to experiment
	
		# My theory is that it's because of race conditions... yet again
		# This program has a lot of fucking issues with race conditions

		pw_ReloadMetadata Title
		pw_ReloadMetadata Date

		if [ "$CurrentTitle" != "$title" ] || [ -z "$CurrentTitle" ]; then	
			pw_ReloadMetadata Title
			CurrentTitle=$title
		fi

		if [ "$CurrentArtist" != "$artist" ] || [ -z "$CurrentArtist" ]; then
			pw_ReloadMetadata Artist
			CurrentArtist=$artist
		fi

		if [ "$CurrentAlbum" != "$album" ] || [ -z "$CurrentAlbum" ]; then
			pw_ReloadMetadata Album
			CurrentArtist=$album
		fi

		if [ "$CurrentDate" != "$date" ] || [ -z "$CurrentDate" ]; then
			pw_ReloadMetadata Date
			CurrentDate=$date
		fi

		if [ "$CurrentSongId" != "$songid" ] || [ -z "$CurrentSongId" ]; then
			pw_ReloadMetadata SongId
			CurrentSongId=$songid
		fi

		pw_ReloadMetadata SetAlbumCover
		CurrentFile="$mpc_file"

	fi 

	return 0
}

pw_PullSongInfo() {
	title="$(echo "$stats" | awk -F ': ' '/^Title:/ { sub(/^Title: /, ""); print }')"
	artist="$(echo "$stats" | awk -F ': ' '/^Artist:/ { sub(/^Artist: /, ""); print }')"
	album="$(echo "$stats" | awk -F ': ' '/^Album:/ { sub(/^Album: /, ""); print }')"
	date="$(echo "$stats" | awk -F ': ' '/^Date:/ { sub(/^Date: /, ""); print }')"
	songid="$(echo "$stats2" | awk -F ': ' '/^song:/ { sub(/^song: /, ""); print }')"
	state="$(echo "$stats2" | awk -F ': ' '/^state:/ { sub(/^state: /, ""); print }')"	

	unprocesseddate=$date
	if [ -z "$date" ]; then
		date=""
	else
    		date="($date)"
	fi

	titlesave="$title"
	artistsave="$artist"

	if [ -z "$title" ]; then
		title="$mpc_file"
	fi

	if [ -z "$artist" ]; then
		artist="Unknown Artist"
	fi
	
	if [ "$state" = "stop" ]; then
		NOTIFYSEND_STATUS=""
		OPPSTATUS=""
		OPPSTATUS2=""
	elif [ "$state" = "pause" ]; then
		NOTIFYSEND_STATUS=""
		OPPSTATUS=""
		OPPSTATUS2=""
	elif [ "$state" = "play" ]; then
		NOTIFYSEND_STATUS=""
		OPPSTATUS=""
		OPPSTATUS2=""
	fi
	return 0
}

pw_SetAlbumCover() {	
	pw_HashSongName
	[ -e "$previewname" ] || 
	ffmpeg -y -i "$filename" -an -vf scale=128:128 "$previewname" > /dev/null 2>&1
}

pw_SpawnMenu() {
	# echo "$Bar_Position" "$DMENU_TITLE" "$Bar_Font" "$Color_Background" "$Color_Foreground" "$Color_SelectedBackground" "$Color_SelectedForeground"

	if [ "$(uname)" = "Darwin" ]; then
		dmenu-mac -p "$DMENU_TITLE"
	else
		dmenu "$Bar_Position" -i -p "$DMENU_TITLE" -fn "$Bar_Font" -nb "$Color_Background" -nf "$Color_Foreground" -sb "$Color_SelectedBackground" -sf "$Color_SelectedForeground"
	fi
	return 0
}

pw_MPDCommandButFiltered() {

    arglist="$1"
     
    [ "$2" != "" ] &&                   arglist="$arglist "$2""
    
    [ "$3" != "" ] && [ "$4" = "" ]  && arglist="$arglist \"$3\""
    
    [ "$3" != "" ] && [ "$4" != "" ] && arglist="$arglist $3 \"$4\""

    [ "$1" = "add" ] || [ "$1" = "save" ] || [ "$1" = "rm" ] && arglist="$1 \"$2\""
    
    pw_MPDCommand "$arglist" | pw_CleanOutput
}

pw_UserSelection() { 

	if [ -z "$OPPSTATUS" ] && [ "$NEWNOTIFBEHAVIOR" = 1 ]; then
		NOTIFICATIONACTION=""
	elif [ "$NEWNOTIFBEHAVIOR" = 0 ]; then
		pw_Refresh
		NOTIFICATIONACTION="--action ""$OPPSTATUS"="$OPPSTATUS"" --action forward="	
	fi

	if [ -z "$mpc_file" ]; then
		Notify_TitlePlay="$Notify_TitleStop"
		Notify_SubtitlePlay=""
	fi

	# Execute the desired action
	case $1 in
    	"" | "prev" | "previous" | "Previous" | "backward")
			pw_MPDCommand previous > /dev/null 2>&1
			if [ -s /tmp/pw_daemonmode ]; then
				return 0
			fi

			pw_SpawnNotification "$(pw_Print "$Notify_TitlePlay")" "$(pw_Print "$Notify_SubtitlePlay")" "$previewname" &
			#pw_SpawnNotificationLegacy action &
			;;

    	"" | "Pause" | "pause")
			pw_MPDCommand pause > /dev/null 2>&1	
			if [ -s /tmp/pw_daemonmode ]; then
				return 0
			fi

			pw_SpawnNotification "$(pw_Print "$Notify_TitlePlay")" "$(pw_Print "$Notify_SubtitlePlay")" "$previewname" &;;

    	"" | "Play" | "play")
			pw_MPDCommand play > /dev/null 2>&1
			if [ -s /tmp/pw_daemonmode ]; then
				return 0
			fi

			pw_SpawnNotification "$(pw_Print "$Notify_TitlePlay")" "$(pw_Print "$Notify_SubtitlePlay")" "$previewname" &;;
		
    	"" | "Stop" | "stop")
			pw_MPDCommand stop > /dev/null 2>&1
			if [ -s /tmp/pw_daemonmode ]; then
				return 0
			fi

			pw_SpawnNotification "$(pw_Print "$Notify_TitlePlay")" "$(pw_Print "$Notify_SubtitlePlay")" "$previewname" &;;

    	"" | "Next" | "next" | "Forward" | "forward")
			pw_MPDCommand next > /dev/null 2>&1
			if [ -s /tmp/pw_daemonmode ]; then
				return 0
			fi

			pw_SpawnNotification "$(pw_Print "$Notify_TitlePlay")" "$(pw_Print "$Notify_SubtitlePlay")" "$previewname" &;;

		"seek" | "volume" | "setvol" | "vol" | "crossfade")
			SELECTED=$1
			INTEGER=$2	
			pw_MenuOptions integer;;

		"cli" | "CLI")
			shift
			CALLED_CMD=$*
			pw_MenuOptions cli "$CALLED_CMD";;

		"single" | "random" | "repeat" | "consume")
			CALLED_CMD="$1"
			pw_MenuOptions boolean "$2";;

		"clear")
			CALLED_CMD="$1"
			pw_MenuOptions confirm "$2";;

		"update" | "shuffle")
			pw_CLICommand "$1";;

		*) 
			prompt="";;

	esac
}

pw_MenuOptions() {
	# Different dmenu routines
	sleep 0.1
	pw_Refresh
	case $1 in
	# Daemon option
		"daemon")
		# Sleep to mitigate some race conditions

			if [ -z "$OPPSTATUS2" ]; then
				mpd=':'"$OPPSTATUS"'::seek:setvol:single:random:repeat:consume:clear:update:shuffle:crossfade'
			else
				mpd=':'"$OPPSTATUS:$OPPSTATUS2"'::seek:setvol:single:random:repeat:consume:clear:update:shuffle:crossfade'
			fi

			if [ "$CLI" = True ]; then
				exit 0
			fi

			if [ -z "$mpc_file" ]; then
				DMENU_TITLE="$NOTIFYSEND_STATUS Stopped"
			else
				DMENU_TITLE="$NOTIFYSEND_STATUS $artist - $title"
			fi

			# Show dmenu with the controls
			if [ -s /tmp/pw_daemonmode ]; then	
				prompt="$(printf '%s\n' "$mpd" | tr ':' '\n' | pw_SpawnMenu)"
				pw_UserSelection "$prompt" &
			fi

			if [ -z "$prompt" ]; then
				return 0
			else
				pw_MenuOptions daemon
			fi;;

		# Different commands
		"integer")
		
			case $SELECTED in
				"setvol" | "Setvol" | "vol" | "Vol" | "volume")
					DMENU_TITLE='Set volume (0-100)'
					SELECTED="setvol";;
				"seek" | "Seek")
					DMENU_TITLE='Seek to where?'
					SELECTED="seek";;
				"crossfade")
					DMENU_TITLE='Set crossfade:'
					SELECTED="crossfade";;
			esac

			if [ -z "$INTEGER" ]; then
				if [ "$(uname)" = "Darwin" ]; then
					Darwin_InsertBoxDialog=$(cat <<EOF
set userInput to display dialog "$DMENU_TITLE" default answer "" buttons {"Cancel", "OK"} default button "OK"

if button returned of userInput is "Cancel" then
    return "Cancel"
else
	set userInputText to text returned of userInput
	try
    	set userInputNumber to userInputText as number
    	set result to userInputNumber
	on error
    	set result to "" as text
	end try
end if

return result
EOF
		)
					prompt=$(osascript -e "$Darwin_InsertBoxDialog")
				else
					prompt=$(printf "Cancel" | pw_SpawnMenu)
				fi

				pw_CLICommand "$SELECTED" "$prompt"
				return 0

			elif [ -n "$INTEGER" ]; then
				pw_CLICommand "$SELECTED" "$INTEGER"
				return 0
			fi;;

		"boolean")
			case $CALLED_CMD in
				"single")
					mpd="0:1:oneshot:Cancel";;
				*)
					mpd="0:1:Cancel";;
			esac

			if [ -z "$2" ]; then
				DMENU_TITLE="Set boolean for $CALLED_CMD"
				prompt="$(printf '%s\n' "$mpd" | tr ':' '\n' | pw_SpawnMenu)"

				if [ -z "$prompt" ] || [ "$prompt" = "[Cancel]" ] || [ "$prompt" = "Cancel" ]; then
					pw_CLICommand menu
					return 0
				fi
				pw_CLICommand "$CALLED_CMD" "$prompt"

			elif [ -n "$2" ]; then
				theinput2="$2"
				pw_CLICommand "$CALLED_CMD" "$theinput2"
			fi;;

		"confirm")
			mpd="Yes:No"
			DMENU_TITLE="Are you sure you want to clear the playlist?"
			prompt="$(printf '%s\n' "$mpd" | tr ':' '\n' | pw_SpawnMenu)"

			case $prompt in
				"Yes")
					pw_CLICommand "$CALLED_CMD";;
				"No")
					prompt="";;
			esac

			if [ -z "$prompt" ]; then
				pw_CLICommand menu
				return 0
			fi;;

		"CLI" | "cli")
			DMENU_TITLE='Periwinkle:'

			if [ -z "$CALLED_CMD" ]; then
				prompt=$(pw_SpawnMenu)
				pw_CLICommand "$prompt"

			elif [ -n "$CALLED_CMD" ]; then
				pw_CLICommand "$CALLED_CMD"
			fi;;

		# No arguments
		"open" | "Open" | "@ACTIONCLICKED")

		# Show dmenu with the controls
			
			if [ "$UseNerdFont" = true ]; then
				PreviousIcon=""
				ForwardIcon=""
			else
				PreviousIcon="Previous"
				ForwardIcon="Next"
			fi

			if [ -z "$OPPSTATUS2" ]; then
				mpd="$PreviousIcon"':'"$OPPSTATUS"':'"$ForwardIcon"':seek:setvol:single:random:repeat:consume:clear:update:shuffle:crossfade:Close'

			else
				mpd="$PreviousIcon"':'"$OPPSTATUS:$OPPSTATUS2"':'"$ForwardIcon"':seek:setvol:single:random:repeat:consume:clear:update:shuffle:crossfade:Close'
			fi

			if [ -z "$mpc_file" ]; then
				DMENU_TITLE="$NOTIFYSEND_STATUS Stopped"

			else
				DMENU_TITLE="$NOTIFYSEND_STATUS "'"'"$title"'"'" by $artist"
			fi

			prompt="$(printf '%s\n' "$mpd" | tr ':' '\n' | pw_SpawnMenu)"
			pw_UserSelection "$prompt"
			if [ -z "$prompt" ]; then
				exit 0
			else
				pw_MenuOptions Open
			fi;;
	esac
}

pw_QuitDaemon() {
	echo 'Quitting...'
	rm /tmp/pw_daemonmode
	exit 0
}

pw_PeriwinkleDaemon() {		
	echo "You're now running Periwinkle as a daemon!"
	echo "The purpose of this feature is to make it so that you get MPD notifications"
	echo "even when you're not running it."
	echo ""
	echo "This feature is still experimental, so please beware of anything that might happen"
	echo 'Daemon Mode' > /tmp/pw_daemonmode
	pw_Refresh
	trap pw_QuitDaemon INT
	trap pw_QuitDaemon TERM
	currentsong_daemon="$title - $artist - $album $date"
	previoussong_daemon="$currentsong_daemon"
	currentstate2="$state"
	previousstate2="$currentstate2"

	while true; do

		if [ "$currentsong_daemon" != "$previoussong_daemon" ] || [ "$currentstate2" != "$previousstate2" ]; then
			echo 'State changed to '"$currentstate2"
			echo 'Song changed to: '"'$title'"' by '"$artist"
			pw_SpawnNotification "$(pw_Print "$Notify_TitlePlay")" "$(pw_Print "$Notify_SubtitlePlay")" "$previewname" &
			previoussong_daemon="$currentsong_daemon"
			previousstate2="$currentstate2"
		fi

		sleep 0.5
		pw_Refresh
		currentsong_daemon="$title - $artist - $album $date"
		currentstate2="$state"
	done
}

pw_Print() {
	pw_Refresh

	case $FORMATCLI in
		"TRUE")
			title="$titlesave"
			artist="$artistsave"
	esac

	input_arguments="$*"

	# Trim leading space and output the captured input arguments
	input_arguments="${input_arguments# }"
	output_text=$(echo "$input_arguments" | awk -v titlevar="$title" -v artistvar="$artist" -v albumvar="$album" -v datevar="$unprocesseddate" -v datepvar="$date" -v statevar="$state" -v stateiconvar="$NOTIFYSEND_STATUS" -v songidvar="$songid" -v filenamevar="$mpc_file" -v dirvar="$filename" '{
	 gsub(/%title%/, titlevar);
	  gsub(/%artist%/, artistvar);
	  gsub(/%album%/, albumvar);
	  gsub(/%date%/, datevar);
	  gsub(/%datep%/, datepvar);
	  gsub(/%state%/, statevar);
	  gsub(/%stateicon%/, stateiconvar);
	  gsub(/%songid%/, songidvar);
	  gsub(/%filename%/, filenamevar);
	  gsub(/%dir%/, dirvar);
	  print;
	}')
	echo "$output_text"
}

# CLI actions
pw_CLICommand() {
	pw_Refresh
	case $1 in
		"help") pw_Help;;

		"pause" | "play" | "prev" | "previous" | "backward" | "stop" | "next" | "forward")
			CLI=True
			pw_UserSelection "$1";;

		"menu") pw_MenuOptions open &;;

		"daemon") pw_PeriwinkleDaemon;;

		"clear" | "update" | "shuffle" | "playlist")
			if [ -z "$2" ]; then
				pw_MPDCommandButFiltered "$*";
			else
				pw_Error ManyArguments
			fi;;

		"add" | "rm" | "find" | "save" | "setvol" | "list" | "crossfade" | "single" | "random" | "consume" | "repeat" | "delete" | "direct")
			if [ "$1" = "direct" ]; then
				pw_MPDCommandButFiltered "$2" "$3" "$4" "$5"
			elif [ -n "$2" ]; then
				pw_MPDCommandButFiltered "$1" "$2" "$3" "$4" "$5"
			else
				pw_Error FewArguments
			fi;;
		"seek")
			if [ -n "$3" ]; then
				pw_Error ManyArguments
			fi

			if [ -z "$songid" ]; then
				pw_Error PlaylistClear "$1"
			fi

			if [ -n "$2" ]; then
				MINIMUMVAL=-1 MAXIMUMVAL=2147483648 pw_CheckNumber "$2" inRange
				pw_MPDCommandButFiltered seek "$songid" "$2"
			else
				pw_Error FewArguments
			fi;;

		"format" | "print")
			FORMATCLI=TRUE
			shift
			pw_Print "$@";;

		"clearpreviews")
			rm "$Directory_AlbumCover"/*.png;;

		"statsfornerds")
			pw_HashSongName
			pw_SetAlbumCover
			echo 'Output: '
			echo "$stats"
			echo
			echo 'Preview Dir: '"$Directory_AlbumCover"
			echo 'Filename: '"$filename"
			echo 'Preview Name: '"$previewname"
			echo ""
			echo 'Title: '"$title"
			echo 'Artist: '"$artist"
			echo 'Album: '"$album"
			echo 'Date: '"$date"
			echo
			echo 'Hash: '"$UseHash"
			echo "DMENU SETTINGS: " "$Bar_Position" "$DMENU_TITLE" "$Bar_Font" "$Color_Background" "$Color_Foreground" "$Color_SelectedBackground" "$Color_SelectedForeground";;

		"console") nc "$MPD_Host" "$MPD_Port";;
		
		"info") pw_AboutProgram;;
		
		"")
		if [ -z "$OPPSTATUS" ] && [ "$NEWNOTIFBEHAVIOR" = 1 ]; then
			NOTIFICATIONACTION=""
		elif [ "$NEWNOTIFBEHAVIOR" = 0 ]; then
			pw_Refresh
			NOTIFICATIONACTION="--action ""$OPPSTATUS"="$OPPSTATUS"" --action forward="	
		fi

		if [ -z "$mpc_file" ]; then
			Notify_TitlePlay="$Notify_TitleStop"
			Notify_SubtitlePlay=""
		fi 
		
		pw_SpawnNotification "$(pw_Print "$Notify_TitlePlay")" "$(pw_Print "$Notify_SubtitlePlay")" "$previewname" &;; 
		
		*) input="$1" pw_Error UnknownCommand;;
	esac
}

if [ "$(uname)" = "Darwin" ]; then
	alias sha256sum="shasum -a 256"
	alias sha512sum="shasum -a 512"
	alias md5sum="md5"
	pw_DependencyList="nc awk alerter dmenu-mac ffmpeg"
else
	pw_DependencyList="nc awk notify-send dmenu ffmpeg"
fi

pw_DependencyListLen=${#pw_DependencyList}

pw_DependencyListLen=$((pw_DependencyListLen + 2))

# Initialize index
pw_PositionedIn=1

# Iterate over each character in the string to find the missing dependencies.
while [ "$pw_PositionedIn" -lt "$pw_DependencyListLen" ]; do
	pw_CurrentChar="$(printf "%s\n" "$pw_DependencyList\n" | cut -c $pw_PositionedIn)"
    pw_PositionedIn=$((pw_PositionedIn + 1))

	if [ "$pw_CurrentChar" = " " ] || [ $pw_PositionedIn -eq $pw_DependencyListLen ]; then
		for cmd in $pw_AuxiliarAppend; do
    		if ! command -v "$cmd" > /dev/null 2>&1; then
				pw_MissingDependency
    		fi
		done
		pw_AuxiliarAppend=""
	else
		pw_AuxiliarAppend="$pw_AuxiliarAppend""$pw_CurrentChar"
	fi

done

pw_FillInTheBlanks

case $Notify_FillEmptyTags in
	"true")
	FORMATCLI="TRUE"
	;;
esac

case $Notify_ExtraButtons in
	"true")
	NEWNOTIFBEHAVIOR=0;;
	"false")
	NEWNOTIFBEHAVIOR=1
	;;
esac	

# Checks if MPD_Port is a valid number that IS an integer and NOT a string
MINIMUMVAL=1 MAXIMUMVAL=65535 pw_CheckNumber "$MPD_Port" inRange
pw_CheckNumber "$Notify_Timeout" isPositive

# Checks if Notify_Timeout is a valid number that is NOT a string, but independently if it's an integer

if [ ! -d "$Directory_AlbumCover" ]; then
	mkdir -v "$Directory_AlbumCover"
fi

# The config checking routines were made by ChatGPT. Thank you so much.

# Convert the seconds to milliseconds in the Notify_Timeout variable
Notify_Timeout=$(awk "BEGIN { printf(\"%.0f\", $Notify_Timeout * 1000) }" | awk '{sub(/%$/,"")}1')

pw_ReloadMetadata All

pw_Refresh

# Fetch some stuff, better not change this
mpc_file="$(echo "$stats" | awk -F ': ' '/^file:/ {print $2}' | awk '{$1=$1};1')"
filename=$Directory_MusicFolder/${mpc_file##*:}

case $Bar_Position in
	"bottom" | "Bottom")
		Bar_Position="-b"
		;;
	"top" | "Top")
		Bar_Position="-f"
		;;
	*)
	Bar_Position="-b"
		;;
esac

pw_CLICommand "$@"
