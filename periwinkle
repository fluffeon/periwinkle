#!/bin/bash


# Check if the necessary dependencies are installed
function whichone() {
	case $cmd in
		"notify-send")
			echo "Error: 'notify-send' (libnotify) is required but not found. Please install it."
			exit 1
		;;
		"nc")
			echo "Error: 'nc' (openbsd-netcat or gnu-netcat) is required but not found. Please install it."
			exit 1
		;;
		"awk")
			echo "Error: 'awk' is required but not found. Please install it."
			exit 1
		;;
		"sed")
			echo "Error: 'sed' is required but not found. Please install it."
			exit 1
		;;
		"grep")
			echo "Error: 'grep' is required but not found. Please install it."
			;;
		"dmenu")
			echo "Error: 'dmenu' is required but not found. Please install it."
                        exit 1
		;;
	esac
}

dependencies=("sed" "nc" "awk" "notify-send" "dmenu" "bc")

for cmd in "${dependencies[@]}"; do
    if ! command -v "$cmd" &>/dev/null; then
	whichone
    fi
done

# Make the config file if it's not there already
function mkconfig() {
	echo '# This is the config file for Periwinkle

# MPD SETTINGS
#
# Self-explanatory, you can set your MPD host here.
# Usually the default will work but you can make it point to a custom URL.
MPD_HOST="localhost"
MPD_PORT="6600"

# DMENU COLORS
#
# In dwm, usually the following equivalents for dmenu coloring are:
# DMENU_FONT = dmenufont
# DWMCOL_BG = col_gray1
# DWMCOL_FG = col_gray3
# DWMCOL_SELECTBG = col_gray4
# DWMCOL_SELECTFG = col_cyan
DMENU_FONT="Terminus:size=10"
DWMCOL_BG=#2A2A2A
DWMCOL_FG=#ECECEC	
DWMCOL_SELECTBG=#000000
DWMCOL_SELECTFG=#70C0BA

# NOTIFICATION SETTINGS
# Notify timeout in seconds
TIMEOUT=3'
}

if [ -s $HOME/.config/periwinkle/config ]; then
	source $HOME/.config/periwinkle/config
else
	mkdir $HOME/.config/periwinkle > /dev/null 2>&1
	$(mkconfig > $HOME/.config/periwinkle/config 2>&1)
	source $HOME/.config/periwinkle/config
fi

# Convert the seconds to milliseconds in the Timeout variable
TIMEOUT=$(awk "BEGIN { printf(\"%.0f\", $TIMEOUT * 1000) }" | awk '{sub(/%$/,"")}1')

# Clean the stinky output
alias cleanoutput="sed "/^OK.*$/d""

function help()
{
	echo "Periwinkle - The cutest MPD client"
	echo ""
	echo "This is a CLI and also a semi-GUI client that can"
	echo "be integrated into a DWM desktop by the use of"
	echo "dunst and dmenu, if you'd like."
	echo ""
	echo "Usage: periwinkle <command> [<arguments> <more args>]"
	echo
	echo "Commands"
	echo "	pause - Toggles between pause and play"
	echo "	play - Play the current song"
	echo "	stop - Stops the queue completely"
	echo "	prev, previous - Goes to the previous song on the queue"
	echo "	next, forward - Goes to the next song on the queue"
	echo ""
	echo "	menu - Shows the dmenu prompt directly"
	echo "	notify - Only shows a notification without actions" 
	echo ""
	echo "Debug commands"
	echo "	direct - Interacts with the MPD server directly (advanced)"
	echo ""
	echo "For now this client is a bit basic and stuff, but"
	echo "I'm gonna keep developing it and it will have"
	echo "more features in the future."
}

function error() {
    echo "Error: $* is not a known command >.<"
}

# Function to send commands to MPD which is netcat-agnostic
function mpdcom {
	echo -e "$1\nclose" | nc "localhost" "6600";
}

# Save the output to a variable so it isn't called everytime, improving performance
function currentsong() {
	stats="$(mpdcom currentsong | tr -d '\r')"
	mpc_file="$(echo "$stats" | awk -F ': ' '/^file:/ {print $2}' | awk '{$1=$1};1')"
	filename=$music_dir/${mpc_file##*:}
}

function setmetadata() {
	title=$(echo $stats | grep -oP '(?<=Title:\s).*?(?=\s(?:Title:|Album:|Track:|Date:|Genre:|Disc:|Time:|duration:|Pos:|Id:|$))')
	artist="$(echo "$stats" | awk -F ': ' '/^Artist:/ {print $2}' | awk '{$1=$1};1')"
	album=$(echo $stats | grep -oP '(?<=Album:\s).*?(?=\s(?:Title:|Album:|Track:|Date:|Genre:|Disc:|Time:|duration:|Pos:|Id:|$))')
	date=$(echo $stats | grep -oP '(?<=Date:\s).*?(?=\s(?:Title:|Album:|Track:|Date:|Genre:|Disc:|Time:|duration:|Pos:|Id:|$))')	

	if [ -z "$date" ]; then
		date=""
	else
    		date="($date)"
	fi
}

function ffmpeg_routine() {
	# Comment [ -e "$previewname" ] || if you want the album cover to be constantly overwritten by FFMPEG when it yanks it. Although it makes it very slow and I don't recommend changing it
	previewname=$previewdir/$(echo "$album $date" | sha256sum | cut -d' ' -f1).png
	[ -e "$previewname" ] || 
	ffmpeg -y -i "$filename" -an -vf scale=128:128 "$previewname" > /dev/null 2>&1
}

# Settings
music_dir="$HOME/Music"
previewdir="$HOME/ncmpcpp/previews"

# Fetch some stuff, better not change this
mpc_file="$(echo "$stats" | awk -F ': ' '/^file:/ {print $2}' | awk '{$1=$1};1')"
filename=$music_dir/${mpc_file##*:}
dmenu="dmenu -i -p "mpd:" -fn $DMENU_FONT -nb $DWMCOL_BG -nf $DWMCOL_FG -sb $DWMCOL_SELECTBG -sf $DWMCOL_SELECTFG"

# If the audio file doesn't contain a year in the metadata, overwrite the variable as nothing and don't show the parentheses so it doesn't look ugly
#if [ -z "$date" ]; then
#    date=""
#else
#    date="($date)"
#fi

#The purpose of this variable is to set each album as unique as possible
#For example, if you had Weezer self-titled albums with the same album name in their metadata, it should be able to differentiate them to show the correct album cover because they have a different metadata for the year and artist. If you have proper metadata for every album then it should work as expected
# Please note that if you don't need this, you can just remove the $date settings. In fact, you could just set this to your liking and make it more verbose, but that's on you.

# Uncomment this to not use SHA256
#previewname="$previewdir/$(mpc --format %album% current).png"

# Comment this to not use SHA256
# In fact, you could just replace SHA256 with another hash, like MD5 or SHA512
previewname=$previewdir/$(echo "$album $date" | sha256sum | cut -d' ' -f1).png

# If the album cover doesn't load on the notification, it might be best to disable MD5
# However one side effect is that you can't save album covers with names that have quirky characters
# This mainly happens to Mopidy users.

#Debugging purposes
#echo 'Output: '
#echo $stats
#echo
#echo 'Previe
#w Dir: '"$previewdir"
#echo 'Filename: '"$filename"
#echo 'Preview Name: '"$previewname"
#echo ""
#echo 'Title: '"$title"
#echo 'Artist: '"$artist"
#echo 'Album: '"$album"
#echo 'Date: '"$date"

function mpdfunc()
{
    arglist=$1
 
    [ "$2" != "" ] &&                   arglist="$arglist $2"
    [ "$3" != "" ] && [ "$4" = "" ]  && arglist="$arglist \"$3\""
    [ "$3" != "" ] && [ "$4" != "" ] && arglist="$arglist $3 \"$4\""
 
    [ "$1" = "add" ] || [ "$1" = "save" ] || [ "$1" = "rm" ] && arglist="$1 \"$2\""
 
    mpdcom "$arglist" | cleanoutput
}

function notifselect() { 
# Execute the desired action
case $prompt in
    "")
	$(mpdcom previous) > /dev/null 2>&1
	currentsong
	setmetadata
	ffmpeg_routine
	if [ "$daemonmode" = "true" ]; then
		rm /tmp/dmenu_output.txt
		dmenum &
	else
		cat /dev/null
	fi

	if [ -s /tmp/dmenu_output.txt ]; then
		dmenu_condition=$(cat /tmp/dmenu_output.txt)
		dmenum
		notify-send -t $TIMEOUT -u low -r 27072 " $title" "$artist \n$album $date" -i "$previewname" &
	else
		notify-send -t $TIMEOUT -u low -r 27072 " $title" "$artist \n$album $date" -i "$previewname" &
	fi
        ;;
    "")
	$(mpdcom pause) > /dev/null 2>&1
	currentsong
	setmetadata
	ffmpeg_routine
	if [ "$daemonmode" = "true" ]; then
		rm /tmp/dmenu_output.txt
		dmenum
	else
		cat /dev/null
	fi

	if [ -s /tmp/dmenu_output.txt ]; then
		dmenu_condition=$(cat /tmp/dmenu_output.txt)
		dmenum
		notify-send -t $TIMEOUT -u low -r 27072 " $title" "$artist \n$album $date" -i "$previewname" &
	else
		notify-send -t $TIMEOUT -u low -r 27072 " $title" "$artist \n$album $date" -i "$previewname" &
	fi	
	;;
    "")
	$(mpdcom play) > /dev/null 2>&1
	currentsong
	setmetadata
	ffmpeg_routine
	if [ "$daemonmode" = "true" ]; then
		rm /tmp/dmenu_output.txt
		dmenum
	else
		cat /dev/null
	fi

	if [ -s /tmp/dmenu_output.txt ]; then
		dmenu_condition=$(cat /tmp/dmenu_output.txt)
		dmenum
		notify-send -t $TIMEOUT -u low -r 27072 " $title" "$artist \n$album $date" -i "$previewname" &
	else
		notify-send -t $TIMEOUT -u low -r 27072 " $title" "$artist \n$album $date" -i "$previewname" &
	fi
	;;
    "")
	$(mpdcom stop) > /dev/null 2>&1
	if [ "$daemonmode" = "true" ]; then
		rm /tmp/dmenu_output.txt
		dmenum
	else
		cat/dev/null
	fi

	if [ -s /tmp/dmenu_output.txt ]; then
		dmenu_condition=$(cat /tmp/dmenu_output.txt)
		dmenum
		notify-send -t $TIMEOUT -u low -r 27072 " Stopped" --action "Open=Menu" &
	else
		notify-send -t $TIMEOUT -u low -r 27072 " Stopped" --action "Open=Menu" &
	fi
	;;
    "")
	$(mpdcom next) > /dev/null 2>&1
	currentsong
	setmetadata
	ffmpeg_routine
	if [ "$daemonmode" = "true" ]; then
		rm /tmp/dmenu_output.txt
		dmenum
	else
		cat /dev/null
	fi

	if [ -s /tmp/dmenu_output.txt ]; then
		dmenu_condition=$(cat /tmp/dmenu_output.txt)
		dmenum
		notify-send -t $TIMEOUT -u low -r 27072 " $title" "$artist \n$album $date" -i "$previewname" &
	else
		notify-send -t $TIMEOUT -u low -r 27072 " $title" "$artist \n$album $date" -i "$previewname" &
	fi
	;;
    "$artist - $title")
	notify-send -t $TIMEOUT -u low -r 27072 " $title" "$artist \n$album $date" -i "$previewname" &
	;;
    *)
        cat /dev/null
        ;;
esac
}

# Menu
function menunotif() {
currentsong
setmetadata
ffmpeg_routine
if [ -z "$title" ]; then
	(notify-send -t $TIMEOUT -u low -r 27072 " Stopped" --action "Open=Menu" > /tmp/dmenu_output.txt)
else
	(notify-send -t $TIMEOUT -u low -r 27072 " $title" "$artist \n$album $date" -i "$previewname" --action "Open=Menu" > /tmp/dmenu_output.txt)
fi

if [ -s /tmp/dmenu_output.txt ]; then
	dmenu_condition=$(cat /tmp/dmenu_output.txt)
	dmenum
else
	cat /dev/null
fi

# Clean up the temporary file
rm /tmp/dmenu_output.txt
}

function menunotif_daemon() {
currentsong
setmetadata
ffmpeg_routine
if [ -z "$title" ]; then
	(notify-send -t $TIMEOUT -u low -r 27072 " Stopped" --action "Open=Menu" > /tmp/dmenu_output_daemon.txt)
else
	(notify-send -t $TIMEOUT -u low -r 27072 " $title" "$artist \n$album $date" -i "$previewname" --action "Open=Menu" > /tmp/dmenu_output_daemon.txt)
fi

if [ -s /tmp/dmenu_output_daemon.txt ]; then
	pkill -9 notify-send
	dmenu_condition=$(cat /tmp/dmenu_output_daemon.txt)
	dmenum
else
	cat /dev/null
fi

# Clean up the temporary file
rm /tmp/dmenu_output_daemon.txt
}

function dmenum() {

# MPD Controls
mpd=("" "" "" "" "" "$artist - $title")
#dmenu_run -m dmenumon -fn $DMENU_FONT -nb $DWMCOL_GRAY1 -nf $DWMCOL_GRAY3 -sb $DWMCOL_CYAN -sf $DWMCOL_GRAY4

# Show dmenu with the controls
if [ -z "$dmenu_condition" ]; then
	cat /dev/null
else
	prompt=$(printf '%s\n' "${mpd[@]}" | $dmenu)
fi

notifselect

}

function daemonize() {		
echo "You're now running Periwinkle as a daemon!"
echo "The purpose of this feature is to make it so that you get MPD notifications"
echo "even when you're not running it."
echo ""
echo "This feature is still experimental, so please beware of anything that might happen"
set -x
daemonmode=true
currentsong
setmetadata
ffmpeg_routine

while true; do
	currentsong
	setmetadata
	currentsong_daemon="$title"

	if [ "$currentsong_daemon" != "$previoussong_daemon" ]; then
		currentsong
		setmetadata
		ffmpeg_routine
		menunotif_daemon
		previoussong_daemon="$currentsong_daemon"
    	fi

# Get the number of processes for the given command
num_processes=$(ps -e -o cmd | grep "notify_send" | wc -l)

# Check if the number of processes is greater than 10
if [ $num_processes -gt 10 ]; then
  # Kill all the processes of the given command
  pkill "notify_send"
  echo "Killed all processes of 'notify_send'."
else
  echo "No action required. 'notify_send' has $num_processes processes."
fi

	sleep 1
done

}

# CLI actions
case $1 in
"help")
        help;;
"pause")
	prompt=""
	notifselect
	currentsong
	setmetadata
	ffmpeg_routine
	notify-send -t $TIMEOUT -u low -r 27072 " $title" "$artist \n$album $date" -i "$previewname" &;;
"play")
	prompt=""
	notifselect
	currentsong
	setmetadata
	ffmpeg_routine
	notify-send -t $TIMEOUT -u low -r 27072 " $title" "$artist \n$album $date" -i "$previewname" &;;
"prev" | "previous" | "backward")
	prompt=""
	notifselect
	currentsong
	setmetadata
	ffmpeg_routine
	notify-send -t $TIMEOUT -u low -r 27072 " $title" "$artist \n$album $date" -i "$previewname" &;;
"'stop'")
	prompt=""
	notifselect
	currentsong
	setmetadata
	ffmpeg_routine
	notify-send -t $TIMEOUT -u low -r 27072 " $title" "$artist \n$album $date" -i "$previewname" &;;
"next" | "forward")
	prompt=""
	notifselect
	currentsong
	setmetadata
	ffmpeg_routine
	notify-send -t $TIMEOUT -u low -r 27072 " $title" "$artist \n$album $date" -i "$previewname" &;;
"menu")
	$(echo Open > /tmp/dmenu_output.txt)
	currentsong
	setmetadata
	ffmpeg_routine
	dmenu_condition=Open
	if [ -s /tmp/dmenu_output.txt ]; then
		dmenu_condition=$(cat /tmp/dmenu_output.txt)
		dmenum
		rm /tmp/dmenu_output.txt
		notify-send -t $TIMEOUT -u low -r 27072 " $title" "$artist \n$album $date" -i "$previewname" &
	else
		notify-send -t $TIMEOUT -u low -r 27072 " $title" "$artist \n$album $date" -i "$previewname" &
	fi
	;;
"notify")
	currentsong
	setmetadata
	ffmpeg_routine
	notify-send -t $TIMEOUT -u low -r 27072 " $title" "$artist \n$album $date" -i "$previewname" &;;
"direct")
	mpdcom $2;;
"daemon")
	daemonize;;
"clear" | "update" | "find" | "list" | "add" | "delete" | "save" | "rm" | "shuffle" | "crossfade" | "setvol")
	mpdfunc $*;;
"config")
	if [ $2 != "reset" ]; then
		echo "Error: Wrong arguments for this command"
	elif [ $2 = "reset" ]; then
		echo "Restoring Periwinkle's configurations to their defaults..."
		rm $HOME/.config/periwinkle/config
		$(mkconfig > $HOME/.config/periwinkle/config 2>&1)
		echo "Done!"
	else
		echo 'Location: '$HOME/,config/periwinkle/config
		echo ""
		cat $HOME/.config/periwinkle/config
	fi
;;
"")
        menunotif;;
 
    *)
        error $*;;
esac
